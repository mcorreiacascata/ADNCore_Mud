// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ADNCORE_MUD.Shared.Models;
using Microsoft.EntityFrameworkCore;

namespace ADNCORE_MUD.Server.Data.Context;

public partial class CNGestaoProjetosTeste : DbContext
{
    public CNGestaoProjetosTeste()
    {
    }

    public CNGestaoProjetosTeste(DbContextOptions<CNGestaoProjetosTeste> options)
        : base(options)
    {
    }

    public virtual DbSet<balcao> balcao { get; set; }

    public virtual DbSet<cae> cae { get; set; }

    public virtual DbSet<chat> chat { get; set; }

    public virtual DbSet<cliente> cliente { get; set; }

    public virtual DbSet<codpostal> codpostal { get; set; }

    public virtual DbSet<concelho> concelho { get; set; }

    public virtual DbSet<contactocliente> contactocliente { get; set; }

    public virtual DbSet<contactotipo> contactotipo { get; set; }

    public virtual DbSet<dimensao> dimensao { get; set; }

    public virtual DbSet<distrito> distrito { get; set; }

    public virtual DbSet<estadoprojeto> estadoprojeto { get; set; }

    public virtual DbSet<etiquetas> etiquetas { get; set; }

    public virtual DbSet<medida> medida { get; set; }

    public virtual DbSet<projeto> projeto { get; set; }

    public virtual DbSet<projetofaturacao> projetofaturacao { get; set; }

    public virtual DbSet<projetopedido> projetopedido { get; set; }

    public virtual DbSet<projetopedidotipo> projetopedidotipo { get; set; }

    public virtual DbSet<projetoresumo> projetoresumo { get; set; }

    public virtual DbSet<regiao> regiao { get; set; }

    public virtual DbSet<senha> senha { get; set; }

    public virtual DbSet<setor> setor { get; set; }

    public virtual DbSet<tarefa> tarefa { get; set; }

    public virtual DbSet<utilizador> utilizador { get; set; }

    public virtual DbSet<vcliente> vcliente { get; set; }

    public virtual DbSet<vlistagemprojetos> vlistagemprojetos { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=adn.nologic.pt;Initial Catalog=CNGestaoProjectos_Teste;User ID=sa;Password=SqlCascata1;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<balcao>(entity =>
        {
            entity.Property(e => e.balcaoDesignacao).IsRequired();
        });

        modelBuilder.Entity<cae>(entity =>
        {
            entity.Property(e => e.caeCodigo).IsRequired();
            entity.Property(e => e.caeNome).IsRequired();
        });

        modelBuilder.Entity<chat>(entity =>
        {
            entity.Property(e => e.chatData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.chatMessage).IsRequired();

            entity.HasOne(d => d.projeto).WithMany(p => p.chat)
                .HasForeignKey(d => d.projeto_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_chat_projeto");

            entity.HasOne(d => d.tarefa).WithMany(p => p.chat)
                .HasForeignKey(d => d.tarefa_Id)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_chat_tarefa");
        });

        modelBuilder.Entity<cliente>(entity =>
        {
            entity.Property(e => e.clienteNome).IsRequired();

            entity.HasOne(d => d.cae).WithMany(p => p.cliente)
                .HasForeignKey(d => d.cae_Id)
                .HasConstraintName("FK_cliente_cae");

            entity.HasOne(d => d.codpostal).WithMany(p => p.cliente)
                .HasForeignKey(d => d.codpostal_Id)
                .HasConstraintName("FK_cliente_codpostal");

            entity.HasOne(d => d.concelho).WithMany(p => p.cliente)
                .HasForeignKey(d => d.concelho_Id)
                .HasConstraintName("FK_cliente_concelho");

            entity.HasOne(d => d.dimensao).WithMany(p => p.cliente)
                .HasForeignKey(d => d.dimensao_Id)
                .HasConstraintName("FK_cliente_dimensao");

            entity.HasOne(d => d.distrito).WithMany(p => p.cliente)
                .HasForeignKey(d => d.distrito_Id)
                .HasConstraintName("FK_cliente_distrito");

            entity.HasOne(d => d.regiao).WithMany(p => p.cliente)
                .HasForeignKey(d => d.regiao_Id)
                .HasConstraintName("FK_cliente_regiao");

            entity.HasOne(d => d.setor).WithMany(p => p.cliente)
                .HasForeignKey(d => d.setor_Id)
                .HasConstraintName("FK_cliente_setor");
        });

        modelBuilder.Entity<codpostal>(entity =>
        {
            entity.Property(e => e.codpostalId).ValueGeneratedNever();
            entity.Property(e => e.concelho_Codigo).IsRequired();

            entity.HasOne(d => d.concelho).WithMany(p => p.codpostal)
                .HasForeignKey(d => d.concelho_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_codpostal_concelho");

            entity.HasOne(d => d.distrito).WithMany(p => p.codpostal)
                .HasForeignKey(d => d.distrito_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_codpostal_distrito");
        });

        modelBuilder.Entity<concelho>(entity =>
        {
            entity.Property(e => e.concelhoCodigo).IsRequired();
            entity.Property(e => e.concelhoNome).IsRequired();

            entity.HasOne(d => d.distrito).WithMany(p => p.concelho)
                .HasForeignKey(d => d.distrito_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_concelho_distrito");
        });

        modelBuilder.Entity<contactocliente>(entity =>
        {
            entity.HasKey(e => e.contactoId).HasName("PK_contacto");

            entity.HasOne(d => d.cliente).WithMany(p => p.contactocliente)
                .HasForeignKey(d => d.cliente_Id)
                .HasConstraintName("FK_contacto_cliente");

            entity.HasOne(d => d.contactotipo).WithMany(p => p.contactocliente)
                .HasForeignKey(d => d.contactotipo_Id)
                .HasConstraintName("FK_contacto_contactotipo");
        });

        modelBuilder.Entity<contactotipo>(entity =>
        {
            entity.Property(e => e.contactotipoNome).IsRequired();
        });

        modelBuilder.Entity<dimensao>(entity =>
        {
            entity.Property(e => e.dimensaoNome).IsRequired();
        });

        modelBuilder.Entity<distrito>(entity =>
        {
            entity.Property(e => e.distritoNome)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<estadoprojeto>(entity =>
        {
            entity.Property(e => e.estadoprojetoNome).IsRequired();
        });

        modelBuilder.Entity<etiquetas>(entity =>
        {
            entity.HasKey(e => e.etiquetaId);

            entity.Property(e => e.ediquetaNome).IsRequired();
        });

        modelBuilder.Entity<medida>(entity =>
        {
            entity.Property(e => e.medidaNome).IsRequired();
            entity.Property(e => e.medidaPrograma).IsRequired();
        });

        modelBuilder.Entity<projeto>(entity =>
        {
            entity.Property(e => e.projetoDatacontratacao).HasColumnType("date");
            entity.Property(e => e.projetoDatadecisao).HasColumnType("date");
            entity.Property(e => e.projetoDatafim).HasColumnType("date");
            entity.Property(e => e.projetoDatainicio).HasColumnType("date");
            entity.Property(e => e.projetoDatasubmissao).HasColumnType("date");
            entity.Property(e => e.projetoIncentivoaprovado).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.projetoIncentivorecebido).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.projetoValorapresentado).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.projetoValoraprovado).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.projetoValorrealizado).HasColumnType("numeric(18, 2)");

            entity.HasOne(d => d.cliente).WithMany(p => p.projeto)
                .HasForeignKey(d => d.cliente_Id)
                .HasConstraintName("FK_projeto_cliente");

            entity.HasOne(d => d.estado).WithMany(p => p.projeto)
                .HasForeignKey(d => d.estado_Id)
                .HasConstraintName("FK_projeto_estadoprojeto");

            entity.HasOne(d => d.medida).WithMany(p => p.projeto)
                .HasForeignKey(d => d.medida_Id)
                .HasConstraintName("FK_projeto_medida");

            entity.HasOne(d => d.utilizador_Responsavel).WithMany(p => p.projeto)
                .HasForeignKey(d => d.utilizador_ResponsavelId)
                .HasConstraintName("FK_projeto_utilizador");
        });

        modelBuilder.Entity<projetofaturacao>(entity =>
        {
            entity.Property(e => e.projetofaturacaoFaturadata).HasColumnType("date");
            entity.Property(e => e.projetofaturacaoFaturavalor).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.projetofaturacaoRecibodata).HasColumnType("date");
            entity.Property(e => e.projetofaturacaoRecibovalor).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.projetofaturacaoValorprevisto).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.projeto).WithMany(p => p.projetofaturacao)
                .HasForeignKey(d => d.projeto_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_projetofaturacao_projetofaturacao");
        });

        modelBuilder.Entity<projetopedido>(entity =>
        {
            entity.Property(e => e.projetopedidoDatadecisao).HasColumnType("date");
            entity.Property(e => e.projetopedidoDatapagamento).HasColumnType("date");
            entity.Property(e => e.projetopedidoDatasubmissao).HasColumnType("date");
            entity.Property(e => e.projetopedidoIncentivoaceite).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.projetopedidoIncentivoprevisto).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.projetopedidoValoraceite).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.projetopedidoValorprevisto).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.projeto).WithMany(p => p.projetopedido)
                .HasForeignKey(d => d.projeto_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_projetopedido_projetopedido");

            entity.HasOne(d => d.projetopedidotipo).WithMany(p => p.projetopedido)
                .HasForeignKey(d => d.projetopedidotipo_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_projetopedido_projetopedidotipo");
        });

        modelBuilder.Entity<projetopedidotipo>(entity =>
        {
            entity.Property(e => e.projetopedidotipoNome).IsRequired();
            entity.Property(e => e.projetopedidotipoSigla).IsRequired();
        });

        modelBuilder.Entity<projetoresumo>(entity =>
        {
            entity.Property(e => e.projetoresumoData).HasColumnType("date");
            entity.Property(e => e.projetoresumoDatahoraregisto).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.projeto).WithMany(p => p.projetoresumo)
                .HasForeignKey(d => d.projeto_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_projetoresumo_projeto");

            entity.HasOne(d => d.utilizador_Id_CriadorNavigation).WithMany(p => p.projetoresumo)
                .HasForeignKey(d => d.utilizador_Id_Criador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_projetoresumo_utilizador");
        });

        modelBuilder.Entity<regiao>(entity =>
        {
            entity.Property(e => e.regiaoNome)
                .IsRequired()
                .HasColumnType("text");
        });

        modelBuilder.Entity<senha>(entity =>
        {
            entity.HasOne(d => d.balcao).WithMany(p => p.senha)
                .HasForeignKey(d => d.balcao_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_senha_balcao");
        });

        modelBuilder.Entity<setor>(entity =>
        {
            entity.Property(e => e.setorNome)
                .IsRequired()
                .HasColumnType("text");
        });

        modelBuilder.Entity<tarefa>(entity =>
        {
            entity.Property(e => e.tarefaDatahoraregisto).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.tarefaNome).IsRequired();
        });

        modelBuilder.Entity<utilizador>(entity =>
        {
            entity.Property(e => e.utilizadorEmail)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.utilizadorIniciais)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.utilizadorNome)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<vcliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vcliente");

            entity.Property(e => e.clienteNome).IsRequired();
            entity.Property(e => e.distritoNome).IsUnicode(false);
            entity.Property(e => e.regiaoNome).HasColumnType("text");
            entity.Property(e => e.setorNome).HasColumnType("text");
        });

        modelBuilder.Entity<vlistagemprojetos>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vlistagemprojetos");

            entity.Property(e => e.clienteNome).IsRequired();
            entity.Property(e => e.medidaNome).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}